name: pull-request-checks
on:
  pull_request:
    branches: [ develop ]

jobs:
  check-ubuntu-20_04-make-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install --no-install-recommends -yq gcc gdb g++ maven jq flex bison libxml2-utils ccache
          make -C src minisat2-download
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-20.04-make-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-20.04-make-${{ github.ref }}
            ${{ runner.os }}-20.04-make
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build with make
        run: |
          make -C src CXX='ccache /usr/bin/g++' -j2
          make -C unit CXX='ccache /usr/bin/g++' -j2
          make -C jbmc/src  CXX='ccache /usr/bin/g++' -j2
          make -C jbmc/unit CXX='ccache /usr/bin/g++' -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run unit tests
        run: |
          make -C unit test
          make -C jbmc/unit test
          echo "Running expected failure tests"
          make TAGS="[!shouldfail]" -C unit test
          make TAGS="[!shouldfail]" -C jbmc/unit test
      - name: Run regression tests
        run: |
          make -C regression test-parallel JOBS=2
          make -C regression/cbmc test-paths-lifo
          env PATH=$PATH:`pwd`/src/solvers make -C regression/cbmc test-cprover-smt2
          make -C jbmc/regression test-parallel JOBS=2

  check-ubuntu-20_04-cmake-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install --no-install-recommends -yq cmake ninja-build gcc g++ maven flex bison libxml2-utils dpkg-dev ccache
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-20.04-Release-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-20.04-Release-${{ github.ref }}
            ${{ runner.os }}-20.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build with Ninja
        run: cd build; ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE -j2

  check-macos-10_15-make-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: brew install maven flex bison parallel ccache
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-make-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-make-${{ github.ref }}
            ${{ runner.os }}-make
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build using Make
        run: |
          make -C src minisat2-download
          make -C src -j2 CXX="ccache clang++"
          make -C jbmc/src -j2 CXX="ccache clang++"
          make -C unit "CXX=ccache clang++"
          make -C jbmc/unit "CXX=ccache clang++"
      - name: Print ccache stats
        run: ccache -s
      - name: Run unit tests
        run: cd unit; ./unit_tests
      - name: Run JBMC unit tests
        run: cd jbmc/unit; ./unit_tests
      - name: Run regression tests
        run: make -C regression test-parallel JOBS=2
      - name: Run JBMC regression tests
        run: make -C jbmc/regression test-parallel JOBS=2

  check-macos-10_15-cmake-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: brew install cmake ninja maven flex bison ccache
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-Release-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-Release-${{ github.ref }}
            ${{ runner.os }}-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
      - name: Build with Ninja
        run: cd build; ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run CTest
        run: cd build; ctest -V -L CORE . -j2

  check-vs-2019-build-and-test:
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: |
          choco install winflexbison3
          nuget install clcache -OutputDirectory "c:\tools" -ExcludeVersion -Version 4.1.0
          echo "c:\tools\clcache\clcache-4.1.0" >> $env:GITHUB_PATH
      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-msbuild-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-msbuild-${{ github.ref }}
            ${{ runner.os }}-msbuild
      - name: ccache environment
        run: |
          echo "CLCACHE_BASEDIR=$((Get-Item -Path '.\').FullName)" >> $env:GITHUB_ENV
          echo "CLCACHE_DIR=$pwd\.ccache" >> $env:GITHUB_ENV
      - name: Configure with cmake
        run: cmake -S . -B build
      - name: Build Release
        run: cmake --build build --config Release -- /p:UseMultiToolTask=true /p:CLToolExe=clcache
      - name: Print ccache stats
        run: clcache -s
      - uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: Test cbmc
        run: |
          Set-Location build
          ctest -V -L CORE -C Release . -j2

  check-clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install --no-install-recommends -yq clang-format-7
      - name: Check updated lines of code match clang-format-7 style
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-clang-format.sh

  check-cpplint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          pip install unidiff
      - name: Check updated lines of code meet linting standards
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-cpplint.sh

  windows-msi-package:
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: |
          choco install winflexbison3
          nuget install clcache -OutputDirectory "c:\tools" -ExcludeVersion -Version 4.1.0
          echo "c:\tools\clcache\clcache-4.1.0" >> $env:GITHUB_PATH
      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-msbuild-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-msbuild-${{ github.ref }}
            ${{ runner.os }}-msbuild
      - name: ccache environment
        run: |
          echo "CLCACHE_BASEDIR=$((Get-Item -Path '.\').FullName)" >> $env:GITHUB_ENV
          echo "CLCACHE_DIR=$pwd\.ccache" >> $env:GITHUB_ENV
      - name: Configure with cmake
        run: cmake -S . -B build
      - name: Build Release
        run: cmake --build build --config Release -- /p:UseMultiToolTask=true /p:CLToolExe=clcache
      - name: Print ccache stats
        run: clcache -s
      - name: Create packages
        id: create_packages
        # We need to get the path to cpack because fascinatingly,
        # chocolatey also includes a command called "cpack" which takes precedence
        run: |
          Set-Location build
          $cpack = "$(Split-Path -Parent (Get-Command cmake).Source)\cpack.exe"
          & $cpack . -C Release
          $msi_name = (Get-ChildItem -name *.msi).Name
          Write-Output "::set-output name=msi_installer::build/$msi_name"
          Write-Output "::set-output name=msi_name::$msi_name"

  ubuntu-18_04-package:
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: sudo apt-get install --no-install-recommends -y g++ flex bison cmake ninja-build maven jq libxml2-utils dpkg-dev ccache
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-18.04-Release-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-18.04-Release-${{ github.ref }}
            ${{ runner.os }}-18.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Build using Ninja
        run: |
          cd build
          ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run CTest
        run: cd build; ctest . -V -L CORE -C Release -j2
      - name: Create packages
        id: create_packages
        run: |
          cd build
          ninja package
          deb_package_name="$(ls *.deb)"
          echo "::set-output name=deb_package::./build/$deb_package_name"
          echo "::set-output name=deb_package_name::ubuntu-18.04-$deb_package_name"


  check-string-table:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Check for unused irep ids
        run: ./scripts/string_table_check.sh

  check-docker-image:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Download test dependencies
        run: sudo apt install openjdk-11-jdk-headless
      - name: Build docker image
        run: docker build -t cbmc .
      - name: Smoke test goto-cc
        run: docker run -v ${PWD}/.github/workflows/smoke_test_assets:/mnt/smoke -t cbmc goto-cc -o /mnt/smoke/test.goto /mnt/smoke/test.c
      - name: Smoke test cbmc
        run: docker run -v ${PWD}/.github/workflows/smoke_test_assets:/mnt/smoke -t cbmc cbmc /mnt/smoke/test.goto
      - name: Smoke test jbmc
        run: |
          javac .github/workflows/smoke_test_assets/Test.java
          docker run -v ${PWD}/.github/workflows/smoke_test_assets:/mnt/smoke -t cbmc jbmc --classpath /mnt/smoke Test
      - name: Smoke test goto-analyzer
        run: docker run -v ${PWD}/.github/workflows/smoke_test_assets:/mnt/smoke -t cbmc goto-analyzer /mnt/smoke/test.goto --unreachable-functions
